<?xml version="1.0"?>
<!--  =======================================================================
      OpenJUMP build file. Based on the HttpUnit build file.

      OpenJUMP Release Procedure:
       - Update PDF documents (especially version history)
       - Update CVS sandbox
       - Commit CVS sandbox
       - Change version in build.xml
       - Run ant clean,dist-zip
       - Tag CVS repository with the version number
      ======================================================================= -->

<project name="openjump" default="dist-zip" basedir="..">
    <property name="name" value="openjump"/>
    <property name="Name" value="OpenJUMP"/>
    <property name="version" value="1.6.2beta"/>
    <!-- The recommended setting for debug is "on", so that line numbers are included in stack traces. [Jon Aquino 2005-04-06] -->
    <property name="debug" value="on"/>
    <property name="deprecation" value="off"/>
    <property name="targetversion" value="1.5"/>
    <property name="sourceversion" value="1.5"/>
    <property name="optimize" value="off"/>
    <property name="src.dir" value="src"/>
    <property name="lib.dir" value="lib"/>
    <property name="etc.dir" value="etc"/>
    <property name="licenses.dir" value="${etc.dir}/licenses"/>
    <property name="scripts.dir" value="scripts"/>
    <property name="docs.dir" value="doc"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="javadoc.dir" value="${build.dir}/javadoc"/>
    <!-- Create a single jar from version 1.4.2 -->
    <!--property name="workbench.jar.name" value="openjump-workbench-${version}.jar" />
    <property name="workbench.jar" value="${build.dir}/${workbench.jar.name}"/>
    <property name="api.jar.name" value="openjump-api-${version}.jar" />
    <property name="api.jar" value="${build.dir}/${api.jar.name}"/-->
    <property name="openjump.jar.name" value="openjump-${version}.jar"/>
    <property name="openjump.jar" value="${build.dir}/${openjump.jar.name}"/>
    <property name="dist.dir" value="dist"/>
    <property name="archive.dir" value="${dist.dir}/${name}-${version}"/>
    <property name="archive.src.dir" value="${dist.dir}/${name}-src-${version}"/>
    <property name="classpath" value=""/>
    <selector id="resource.selector">
        <and>
            <or>
                <filename name="**/*.properties" casesensitive="no"/>
                <filename name="**/*.png" casesensitive="no"/>
                <filename name="**/*.gif" casesensitive="no"/>
                <filename name="**/*.java2xml" casesensitive="no"/>
                <filename name="**/*.html" casesensitive="no"/>
                <filename name="**/*.xml" casesensitive="no"/>
                <filename name="**/*.txt" casesensitive="no"/>
                <filename name="**/*.csv" casesensitive="no"/>
                <filename name="**/*.jpg" casesensitive="no"/>
                <filename name="**/*.xsl" casesensitive="no"/>
                <filename name="**/*.ttf" casesensitive="no"/>
            </or>
            <not>
                <filename name="**/overview.html" casesensitive="no"/>
            </not>
            <not>
                <filename name="**/package.html" casesensitive="no"/>
            </not>
        </and>
    </selector>
    <!-- Create a single jar openjump.jar from version 1.4.2 -->
    <selector id="openjump.jar.selector">
        <and>
            <or>
                <filename name="**/*.class" casesensitive="no"/>
                <filename name="language/**" casesensitive="no"/>
                <selector refid="resource.selector"/>
            </or>
            <not>
                <filename name="jumptest/**" casesensitive="no"/>
            </not>
            <not>
                <filename name="versiondoc/**" casesensitive="no"/>
            </not>
        </and>
    </selector>
    <selector id="archive.src.selector">
        <and>
            <or>
                <filename name="**/*.java" casesensitive="no"/>
                <filename name="language/**" casesensitive="no"/>
                <selector refid="resource.selector"/>
            </or>
            <not>
                <filename name="jumptest/**" casesensitive="no"/>
            </not>
        </and>
    </selector>

    <!-- =================================================================== -->
    <!-- Defines the classpath used for compilation and test.                -->
    <!-- =================================================================== -->
    <path id="base.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
            <!-- exclude postgis_1_0_0.jar, it is no more used-->
            <exclude name="postgis_1_0_0.jar"/>
        </fileset>
    </path>

    <!--  ===================================================================  -->
    <!--  Prepares the build directory                                         -->
    <!--  ===================================================================  -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
    </target>

    <!--  ===================================================================  -->
    <!--  Compiles the source code                                             -->
    <!--  ===================================================================  -->
    <target name="compile" id="compile" depends="prepare">
        <mkdir dir="${build.classes}"/>
        <javac srcdir="${src.dir}" 
               destdir="${build.classes}" 
               debug="${debug}"    
               deprecation="${deprecation}" 
               optimize="${optimize}" 
               target="${targetversion}" 
               source="${sourceversion}"
               includeantruntime="false">
            <classpath refid="base.classpath"/>
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src.dir}" excludes="**/*.java,**/*.class"/>
        </copy>
    </target>

    <!--  ===================================================================  -->
    <!--  Creates the jar archive                                              -->
    <!--  ===================================================================  -->
    <!-- [sstein] new property -->
    <property name="distpathprop" refid="base.classpath"/>
    
    <target name="jar" id="jar" depends="compile">
        <!-- [sstein] eliminate absolute paths from manifest file -->
        <!-- no more used...-->
        <!--replaceregexp file="${build.dir}/info.txt" match=":\\" replace="" flags="gs"/>
        <replaceregexp file="${build.dir}/info.txt" match=":[^:;]*lib" replace=": lib" flags="gs"/>
        <replaceregexp file="${build.dir}/info.txt" match=";[^:;]*lib" replace=" lib" flags="gs"/-->
        <!-- manifest="${build.dir}/info.txt" -->

        <manifestclasspath property="manifest.classpath" jarfile="lib/bogus.jar">
            <classpath refid="base.classpath" />
        </manifestclasspath>
        <!-- Create a single jar from version 1.4.2 -->
        <jar jarfile="${openjump.jar}">
            <fileset dir="${build.classes}">
                <selector refid="openjump.jar.selector"/>
            </fileset>
            <manifest>
                <attribute name="Sealed" value="false" />
                <attribute name="${Name}-Version" value="${version}" />
                <attribute name="Build-Date" value="${TODAY}" />
                <attribute name="Build-Time" value="${TSTAMP}" />
                <attribute name="Class-Path" value="${manifest.classpath} ${openjump.jar.name}" />
                <attribute name="Main-Class" value="com.vividsolutions.jump.workbench.JUMPWorkbench" />
            </manifest>
        </jar>
    </target>

    <!--  ===================================================================  -->
    <!--  Creates the API documentation                                        -->
    <!--  ===================================================================  -->
    <target name="javadocs" id="javadoc" depends="prepare">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc destdir="${javadoc.dir}" use="true">
            <classpath refid="base.classpath"/>
            <packageset dir="${src.dir}">
                <exclude name="jumptest/**"/>
                <exclude name="language/**"/>
                <exclude name="versiondoc/**"/>
            </packageset>
        </javadoc>
    </target>

    <!--  ===================================================================  -->
    <!--  Creates the distribution                                             -->
    <!--  ===================================================================  -->
    <!--target name="dist" id="dist" depends="jar,javadocs"-->
    <target name="dist" id="dist" depends="jar">
        <mkdir dir="${archive.dir}"/>
        <copy todir="${archive.dir}/bin">
            <fileset dir="${scripts.dir}"/>
            <!--filterset>
                <filter token="VERSION" value="${version}"/>
            </filterset-->
        </copy>
        <copy file="etc/log4j2.xml" todir="${archive.dir}/bin"/>
        <copy todir="${archive.dir}">
            <fileset dir=".">
                <include name="${lib.dir}/**"/>
                <include name="${docs.dir}/**"/>
                <exclude name="**/junit.jar"/>
                <exclude name="**/postgis_1_0_0.jar"/>
            </fileset>
        </copy>
        <!-- Create a single jar from version 1.4.2 -->
        <!--copy file="${workbench.jar}" todir="${archive.dir}/lib"/>
        <copy file="${api.jar}" todir="${archive.dir}/lib"/-->
        <copy file="${openjump.jar}" todir="${archive.dir}/lib"/>
        <mkdir dir="${archive.dir}/licenses"/>
        <copy todir="${archive.dir}/licenses">
            <fileset dir="${licenses.dir}">
                <include name="*.txt"/>
                <include name="*.pdf"/>
            </fileset>
        </copy>
        <copy file="etc/readme.txt" todir="${archive.dir}"/>
        <copy file="Changes.txt" todir="${archive.dir}"/>
        
        <!-- and now the source zip-->
        <mkdir dir="${archive.src.dir}"/>
        <copy todir="${archive.src.dir}/javadoc">
            <fileset dir="${javadoc.dir}"/>
        </copy>
        <copy todir="${archive.src.dir}/src">
            <fileset dir="${src.dir}">
                <selector refid="archive.src.selector"/>
            </fileset>
        </copy>
        <mkdir dir="${archive.src.dir}/licenses"/>
        <copy todir="${archive.src.dir}/licenses">
            <fileset dir="${licenses.dir}">
                <include name="*.txt"/>
                <include name="*.pdf"/>
            </fileset>
        </copy>
        <!-- [sstein] added begin : copy also all other stuff to src-->
        <copy todir="${archive.src.dir}">
            <fileset dir=".">
                <include name="${lib.dir}/**"/>
                <exclude name="**/junit.jar"/>
                <exclude name="**/postgis_1_0_0.jar"/>
                <include name="${docs.dir}/**"/>
                <include name="${etc.dir}/**"/>
                <include name="${scripts.dir}/**"/>
            </fileset>
        </copy>
        <copy file="etc/readme.txt" todir="${archive.src.dir}"/>
        <copy file="Changes.txt" todir="${archive.src.dir}"/>
        <!-- [sstein] added end -->
    </target>

    <!--  ===================================================================  -->
    <!--  Packages the distribution with ZIP                                   -->
    <!--  ===================================================================  -->
    <target name="dist-zip" depends="dist">
        <zip zipfile="${dist.dir}/${name}-${version}.zip" basedir="${dist.dir}" includes="${name}-${version}/**"/>
        <zip zipfile="${dist.dir}/${name}-src-${version}.zip" basedir="${dist.dir}" includes="${name}-src-${version}/**"/>
    </target>

    <!--  ===================================================================  -->
    <!--  Cleans up generated stuff                                            -->
    <!--  ===================================================================  -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    
    <!--  ===================================================================  -->
    <!--  Unit tests with JUnit                                                -->
    <!--  ===================================================================  -->
    <target name="unit-test" depends="compile">
        <junit printsummary="yes" fork="yes" dir=".">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <pathelement path="${build.classes}"/>
            </classpath>
            <test name="org.openjump.core.ui.plugin.tools.UnionByAttributePlugInTest"/>
            <test name="org.openjump.core.ui.plugin.tools.DeleteDuplicateGeometriesPlugInTest"/>
        </junit>
    </target>
</project>
